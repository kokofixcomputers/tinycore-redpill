name: release tags

on:
  release:
    types: [published]

  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bring last uploaded mydata.tgz files from tinycore-redpill & lastest img
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bison flex libgmp3-dev xorriso qemu-utils libfreetype6-dev
          #sudo apt-get install grub2 qemu-utils grub-efi-amd64-bin
          curl -kLO# https://github.com/PeterSuh-Q3/tinycore-redpill/releases/download/v1.0.2.4/tinycore-redpill.v1.0.2.4.m-shell.img.gz
          gunzip tinycore-redpill.v1.0.2.4.m-shell.img.gz
          pwd
          ls -ltr
          
      - name: Download GRUB 2.12 source
        run: |
          wget https://ftp.gnu.org/gnu/grub/grub-2.12.tar.gz
          tar xzf grub-2.12.tar.gz
          cd grub-2.12
  
      - name: Configure GRUB
        working-directory: grub-2.12
        run: |
          ./configure --prefix=/usr        \
            --sysconfdir=/etc    \
            --disable-efiemu     \
            --enable-grub-mkfont \
            --with-platform=efi  \
            --target=x86_64      \
            --disable-werror     \
            --enable-freetype &&
            unset TARGET_CC
          
      - name: Create extra_deps.lst
        working-directory: grub-2.12
        run: |
          echo "depends bli part_gpt" > grub-core/extra_deps.lst
        
      - name: Build GRUB
        working-directory: grub-2.12
        run: make -j4
  
      #- name: Run tests
      #  working-directory: grub-2.12
      #  run: make check
  
      - name: Install GRUB
        working-directory: grub-2.12
        run: sudo make install && sudo mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions 

      - name: Return to workflow home directory
        run: cd $GITHUB_WORKSPACE
      
      - name: Mount source img and make target img
        id: get-version
        run: |
          VERSION=v`cat functions.sh | grep rploaderver= | cut -d\" -f2`
          echo "Version: ${VERSION}"
          echo "::set-output name=VERSION::${VERSION}"
          mkdir /opt/output
          
          LOOPX=$(sudo losetup -f)
          echo "LOOPX = ${LOOPX}"          
          sudo losetup -P ${LOOPX} tinycore-redpill.v1.0.2.4.m-shell.img
          
          dd if=/dev/zero of=tinycore-redpill.${VERSION}.xtcrp.img bs=1M seek=2048 count=0
          echo -e "n\np\n1\n\n+72M\nn\np\n2\n\n+75M\nn\np\n3\n\n+1899M\nw\nq\n" | sudo fdisk tinycore-redpill.${VERSION}.xtcrp.img
          echo -e "a\n1\nw" | sudo fdisk tinycore-redpill.${VERSION}.xtcrp.img
          #echo -e "t\n1\nuefi\nw" | sudo fdisk tinycore-redpill.${VERSION}.xtcrp.img
          
          LOOPZ=$(sudo losetup -f)
          sudo losetup -P ${LOOPZ} tinycore-redpill.${VERSION}.xtcrp.img
          echo "LOOPZ = ${LOOPZ}"
          sudo fdisk -l ${LOOPZ}
          
          ## Format 3rd partition with vfat ##
          #sudo mkfs.vfat -F16 ${LOOPZ}p1
          #sudo mkfs.vfat -F16 ${LOOPZ}p2
          sudo mkfs.vfat -i 6234C863 -F16 ${LOOPZ}p3
          
          ## Copy 1st,2nd,3rd partition from source to target (with grub 2.12 install) ##
          sudo dd if="${LOOPX}p1" of="${LOOPZ}p1"
          sudo mkdir -p /mnt/tarp1
          sudo mount ${LOOPZ}p1 /mnt/tarp1

          export GRUB_VERSION=2.12
          sudo grub-install --version
          sudo grub-install --target=x86_64-efi --removable --efi-directory="/mnt/tarp1" --boot-directory="/mnt/tarp1/boot" --bootloader-id=GRUB
          sudo grub-install --target=i386-pc --boot-directory="/mnt/tarp1/boot" "${LOOPZ}"

          sudo cp -vf ${GITHUB_WORKSPACE}/grub/grub.cfg /mnt/tarp1/boot/grub/grub.cfg

          ls -ltr /mnt/tarp1/boot/grub/x86_64-efi/
          echo "Copy and check EFI files"
          ls -ltr /mnt/tarp1/EFI/BOOT/
          
          sudo cat /mnt/tarp1/EFI/BOOT/grub.cfg
          sudo blkid "${LOOPX}p1"
          sudo blkid "${LOOPZ}p1"

          ##  Copy 2nd partition from source to target ##
          sudo dd if="${LOOPX}p2" of="${LOOPZ}p2"
          
          ## Copy 3rd partition from source to target ##
          sudo mkdir -p /mnt/p3
          sudo mount ${LOOPX}p3 /mnt/p3
          sudo mkdir -p /mnt/tarp3
          sudo mount ${LOOPZ}p3 /mnt/tarp3
          cd /mnt/p3 && sudo find . | sudo cpio -pdm "/mnt/tarp3"
          cd $GITHUB_WORKSPACE
          sudo cp -vf ${GITHUB_WORKSPACE}/mydata.tgz /mnt/tarp3
          ls -ltr /mnt/tarp3
          
          ## add tinycore packages
          sudo cp -vf ${GITHUB_WORKSPACE}/grub/grubbkg.png /mnt/tarp3/grubbkg.png
          sudo cp -vf ${GITHUB_WORKSPACE}/xtcrp.tgz /mnt/tarp3/xtcrp.tgz
          sudo rm -rf /mnt/tarp3/cde          
          sudo rm -f /mnt/tarp3/corepure64.gz
          sudo rm -f /mnt/tarp3/vmlinuz64
          sudo rm -f /mnt/tarp3/mydata.tgz

          ## add friend gnu kernel
          LATESTURL="`curl --connect-timeout 5 -skL -w %{url_effective} -o /dev/null "https://github.com/PeterSuh-Q3/tcrpfriend/releases/latest"`"
          FRTAG="${LATESTURL##*/}"
          echo "FRIEND TAG is ${FRTAG}"        
          curl -kLO# "https://github.com/PeterSuh-Q3/tcrpfriend/releases/download/${FRTAG}/chksum" \
          -O "https://github.com/PeterSuh-Q3/tcrpfriend/releases/download/${FRTAG}/bzImage-friend" \
          -O "https://github.com/PeterSuh-Q3/tcrpfriend/releases/download/${FRTAG}/initrd-friend"
          sudo mv -vf bzImage-friend /mnt/tarp3
          sudo mv -vf initrd-friend /mnt/tarp3
          
          ##  Finalize ##
          sudo umount /mnt/p3
          sudo umount /mnt/tarp1
          sudo umount /mnt/tarp3
          sudo losetup -d ${LOOPZ}
          sudo losetup -d ${LOOPX}
          gzip -c tinycore-redpill.${VERSION}.xtcrp.img > /opt/output/tinycore-redpill.${VERSION}.xtcrp.img.gz
          qemu-img convert -f raw -O vmdk tinycore-redpill.${VERSION}.xtcrp.img tinycore-redpill.${VERSION}.xtcrp.vmdk
          gzip -c tinycore-redpill.${VERSION}.xtcrp.vmdk > /opt/output/tinycore-redpill.${VERSION}.xtcrp.vmdk.gz
          qemu-img convert -f raw -O vhdx -o subformat=dynamic -p tinycore-redpill.${VERSION}.xtcrp.img tinycore-redpill.${VERSION}.xtcrp.vhdx
          gzip -c tinycore-redpill.${VERSION}.xtcrp.vhdx > /opt/output/tinycore-redpill.${VERSION}.xtcrp.vhdx.gz
          ls -ltr /opt/output
          
      - name: Upload MshellImage-${{ steps.get-version.outputs.VERSION }}
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: MshellImage-${{ steps.get-version.outputs.VERSION }}
          path: /opt/output
      # Publish a release if is a tag
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          files: |
            /opt/output/*.gz
          body_path: RELEASE_NOTES.md            
